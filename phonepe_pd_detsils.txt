Node.js SDK Integration


To integrate the PhonePe Node.js SDK, install the SDK package and initialize StandardCheckoutClient using your credentials. This sets up secure communication with PhonePe and allows the merchant to request payments, handle refunds, fetch order statuses, and verify callbacks during the payment journey.
￼

1. Install PhonePe SDK

To start using the PhonePe Node.js SDK, first install it using the provided npm command. After installation, you will need your client ID and client secret to initialize the SDK.
To install the PhonePe SDK, refer to the SDK Installation.
2. Class Initialization

The StandardCheckoutClient class is used to connect with PhonePe. You must initialize it once using your client ID, client secret, client version, and environment. Creating multiple instances will throw a PhonePeException. Use this client to make all payment-related requests.
To set up your Client ID and Client Secret, refer to the Class Initialization.
3. Initiate Payment

Use StandardCheckoutPayRequest.build_request() to create a payment request by setting details like merchantOrder ID, amount, redirect URL, and optional metadata. Pass this request to the pay() method to get a checkout URL, which redirects the customer to complete the payment.
To initiate payments, refer to Initiate Payment.
4. Create SDK Order

Use CreateSdkOrderRequest.StandardCheckoutBuilder() to generate an order token when your backend is in Node.js and the payment is triggered from a mobile SDK. This token is needed by the frontend app to initiate the payment. Set attributes like order ID, amount, and redirect URL while building the request.
To create SDK order, refer to Create SDK Order.
5. Check Order Status

Use client.getOrderStatus(merchantOrderId) to check the current status of an order. You can choose to view either the latest payment attempt. The response includes order status, amount, and detailed payment information such as transaction state, payment mode, and error codes if any.
To create SDK order, refer to Check Order Status.
6. Initiate Refund

Use the refund() function to initiate a refund by passing the order ID, refund ID, and amount through RefundRequest.builder(). The response includes the refund status and amount refunded.
To check the status of an initiated refund, use getRefundStatus(refundId). The response provides the current refund state along with payment details such as transaction ID, payment mode, and error codes if the refund failed.
To initiate a refund and check its status, refer to Refund and Refund Status.
7. Webhook Handling

Use the validateCallback() method to verify the authenticity of a callback received from PhonePe. Pass your configured username, password, the Authorization header value, and the response body string. The method returns a CallbackResponse object that confirms if the callback is valid and includes event type, state, order or refund details, and payment information. This ensures only trusted callback events are processed in your system.
To verify the callback refer to Webhook Handling.
8. Exception Handling

Handle errors using the PhonePeException class, which captures all issues that occur during API interactions. The exception provides key details like HTTP status, error code, message, and data. Use try-catch blocks to catch exceptions and log or display error information as needed. This ensures your integration handles failures gracefully and provides clarity during debugging.
To handle errors and unexpected responses, refer to Exception Handling.

By following the above steps, you can integrate the PhonePe Node.js SDK to initiate payments, check order and refund statuses, verify callbacks, and handle exceptions, ensuring a smooth and secure payment experience for your customers.
  Node.js SDK Installation


The PhonePe PG Backend SDK for Node.js is designed to simplify the process of integrating PhonePe’s payment solutions into your backend systems. It provides a structured, pre-built interface for securely interacting with PhonePe’s payment infrastructure.
This SDK helps you build a reliable and PCI-compliant payment flow with minimal effort. Ideal for server-side environments, it ensures robust communication between your application backend and the PhonePe Payment Gateway.
Minimum Supported Version

* Node.js: v14 or higher
Install the SDK using npm

Use the following command to install the SDK in your Node.js project:
Command to Install

npm i https://phonepe.mycloudrepo.io/public/repositories/phonepe-pg-sdk-node/releases/v2/phonepe-pg-sdk-node.tgz
This command will install the SDK from the specified repository.
 Node.js Class Initialization


StandardCheckoutClient class will be used to communicate with the PhonePe APIs. You can initiate the instance of this class only once. Use required credentials while initializing the object.
Parameter Name	Data Type	Mandatory
(Yes/No)	Description
client_id	Integer	Yes	Your unique client ID for secure communication with PhonePe.
client_version	String	Yes	Client version for secure communication with PhonePe.
client_secret	Integrer	Yes	Secret key provided by PhonePe Payment Gateway, which must be securely stored.
env	Enum	Yes	Environment for the client:
• PRODUCTION
• SANDBOX
Sample code

import { StandardCheckoutClient, Env } from 'pg-sdk-node';
 
const clientId = "<clientId>";
const clientSecret = "<clientSecret>";
const clientVersion = <clientVersion>;  //insert your client version here
const env = Env.SANDBOX;      //change to Env.PRODUCTION when you go live
 
const client = StandardCheckoutClient.getInstance(clientId, clientSecret, clientVersion, env);


Initiate Payment with Node.js SDK


The Initiate Payment step allows you to start a payment transaction by creating a payment request with essential details like order ID, amount, and redirect URL. This request prepares the transaction on PhonePe’s platform and generates a redirect URL where users complete their payment securely.
Request

Use StandardCheckoutPayRequest.build_request() to create the payment request. Below are the key attributes you can set:
Parameter Name	Data Type	Mandatory
(Yes/No)	Description	Constraints
merchantOrderId	String	Yes	Unique order ID assigned by you	Max length: 63 characters, no special characters except “_” and “-”
amount	Long	Yes	Order amount in paisa	Minimum value: 100 (in paisa)
metaInfo	Object	No	Meta information is defined by you to store additional information. The same data will be returned in status and callback response.	
metaInfo.udf1-5	String	No	Optional details you can add for more information.	Maximum length = 256 characters
redirectUrl	String	No	URL to which the user will be redirected after the payment (success or failure)	
Sample Request

import { StandardCheckoutClient, Env, MetaInfo, StandardCheckoutPayRequest } from 'pg-sdk-node';
import { randomUUID } from 'crypto';
 
const clientId = "<clientId>";
const clientSecret = "<clientSecret>";
const clientVersion = <clientVersion>;    //insert your client version here
const env = Env.SANDBOX;        //change to Env.PRODUCTION when you go live
 
const client = StandardCheckoutClient.getInstance(clientId, clientSecret, clientVersion, env);
 
const merchantOrderId = randomUUID();
const amount = 100;
const redirectUrl = "https://www.merchant.com/redirect";
const metaInfo = MetaInfo.builder()
                    .udf1("udf1")
                    .udf2("udf2")
                    .build();
 
const request = StandardCheckoutPayRequest.builder()
        .merchantOrderId(merchantOrderId)
        .amount(amount)
        .redirectUrl(redirectUrl)
        .metaInfo(metaInfo)
        .build();
 
client.pay(request).then((response)=> {
    const checkoutPageUrl = response.redirectUrl;
})
Response

The function returns a StandardCheckoutPayResponse object with the following properties:
Attribute	Data Type	Description
state	String	State of the order created, expected value is PENDING.
redirect_url	String	URL for the PhonePe Payment Gateway Standard Checkout page. This is the URL to which the user should be redirected for payment.
order_id	String	A unique internal order ID generated by PhonePe PG.
expire_at	String	Order expiry timestamp in epoch.
 Create Order with Node.js SDK


Create SDK Order is to generate an order token when your backend is in Node.js and you’re integrating with any mobile app. This lets your frontend app get the Order token it needs to start the payment requests.
Request

You can use CreateSdkOrderRequest.StandardCheckoutBuilder() to create the request. You can pass the following attributes.
Parameter Name	Data Type	Mandatory
(Yes/No)	Description	Constraints
merchantOrderId	String	Yes	Unique order ID assigned by you.	Max Length = 63 characters
amount	Integer	Yes	Order amount in paisa.	Minimum value: 100 (in paisa)
redirectUrl	String	Yes	URL to which the user will be redirected after the payment (success or failure).	
Sample Request

import { StandardCheckoutClient, Env, CreateSdkOrderRequest } from 'pg-sdk-node';
import { randomUUID } from 'crypto';
 
const clientId = "<clientId>";
const clientSecret = "<clientSecret>";
const clientVersion = <clientVersion>;  //insert your client version here
const env = Env.SANDBOX;      //change to Env.PRODUCTION when you go live
 
const client = StandardCheckoutClient.getInstance(clientId, clientSecret, clientVersion, env);
 
const merchantOrderId = randomUUID();
const amount = 1000;
const redirectUrl = "https://redirectUrl.com";
 
const request = CreateSdkOrderRequest.StandardCheckoutBuilder()
        .merchantOrderId(merchantOrderId)
        .amount(amount)
        .redirectUrl(redirectUrl)
        .build();
 
client.createSdkOrder(request).then((response) => {
    const token = response.token
})
Response

The function returns a CreateOrderResponse object with the following properties:
Property	Data Type	Description
orderId	String	Order ID generated by PhonePe PG.
state	String	State of the Order. Initially it will be PENDING.
expireAt	Number	Expiry time in epoch.
token	String	Token used by the merchant UI to initiate order.


Check Order Status with Node.js SDK


It is used to check the status of an order.
Request

The request parameters are as follows:
Parameter Name	Data Type	Mandatory
(Yes/No)	Description
merchantOrderId	String	Yes	The merchant order ID for which the status is fetched.
details	String	No	• true → Returns all payment attempt details under the paymentDetails list.
• false → Returns only the latest payment attempt details.
Sample Request

import { StandardCheckoutClient, Env } from 'pg-sdk-node';
 
const clientId:string = "<clientId>";
const clientSecret:string = "<clientSecret>";
const clientVersion:string = <clientVersion>;  //insert your client version here
const env:Env = Env.SANDBOX;      //change to Env.PRODUCTION when you go live
 
const client = StandardCheckoutClient.getInstance(clientId, clientSecret, clientVersion, env);
 
const merchantOrderId = '<MERCHANT_ORDER_ID>';                    //Order Id used for creating new order
 
client.getOrderStatus(merchantOrderId).then((response) => {
  const state = response.state;
});
Response

The function returns an OrderStatusResponse object with the following properties:
Property	Data Type	Description
order_id	String	Order ID generated by PhonePe PG.
state	String	Current state of the order: Expected values:
• PENDING
• FAILED
• COMPLETED
amount	Integer	Order amount in paisa.
expire_at	Integer	Expiry time of the order in epoch.
metaInfo	MetaInfo	Meta information provided by you during order creation.
payment_details	List<PaymentDetail>	List of payment attempt details corresponding to the order.
The paymentDetails property contains a list of payment details for each payment attempt made against an order. The details of each payment are explained in the table below.
Property	Data Type	Description
transactionId	Integer	The transaction ID generated by PhonePe PG.
paymentMode	String	The payment method used
• UPI_INTENT
• UPI_COLLECT
• UPI_QR
• CARD
• TOKEN
• NET_BANKING
timestamp	Long	Timestamp of the attempted transaction in epoch.
amount	Integer	Order amount in paisa.
state	String	Attempted transaction state. It can be any one of the following states:
• PENDING
• COMPLETED
• FAILED
errorCode	String	Error code (only if the transaction failed)
detailedErrorCode	String	A more detailed error code (only if the transaction failed)
splitInstruments	list<InstrumentCombo>	Contains split instrument details of all the transactions made.
splitInstruments provides a list of InstrumentCombo objects. Details of each InstrumentCombo object are explained in the table below.
list
Property	Data Type	Type
instrument	PaymentInstrumentV2	Instrument used for the payment.
rails	PaymentRail	Rail used for the payment.
amount	Integer	Amount transferred using the above instrument and rail.

Handle Webhooks with Node.js SDK


Use callback verification to confirm that the callback you received from PhonePe is authentic.
The standard_phonepe_client.validate_callback method is used to validate webhook or callback responses. You can use this method by passing all the necessary parameters.
Request

The request parameters are as follows:
Request Parameters
Parameter Name	Data Type	Description
username	String	Your unique username configured for the callback URL
password	String	Your unique password configured for the callback URL
authorization	String	The Authorization token sent in the callback response
responseBody	String	The actual response body received in the callback as a string
Sample Request

import { StandardCheckoutClient, Env } from 'pg-sdk-node';
 
const clientId = "<clientId>";
const clientSecret = "<clientSecret>";
const clientVersion = <clientVersion>;  //insert your client version here
const env = Env.SANDBOX;      //change to Env.PRODUCTION when you go live
 
const client = StandardCheckoutClient.getInstance(clientId, clientSecret, clientVersion, env);
 
const authorizationHeaderData = "ef4c914c591698b268db3c64163eafda7209a630f236ebf0eebf045460df723a" // received in the response headers
const phonepeS2SCallbackResponseBodyString = "{\"type\": \"PG_ORDER_COMPLETED\",\"payload\": {}}"  // callback body as string
  
const usernameConfigured = "<MERCHANT_USERNAME>"
const passwordConfigured = "<MERCHANT_PASSWORD>" 
 
const callbackResponse = client.validateCallback(
    usernameConfigured,
    passwordConfigured,
    authorizationHeaderData,
    phonepeS2SCallbackResponseBodyString );
 
const orderId = callbackResponse.payload.orderId;
const state = callbackResponse.payload.state;
Response

The function returns a CallbackResponse object containing two main parameters: type, which indicates the event type, and payload, which holds all the event-specific details.
Parameter Name	Data Type	Description
type	CallbackType	Tells you what type of event happened (e.g., order completed, refund failed, etc.)
payload	CallbackData	Contains all the details related to that event
	•	The event type are explained below:
Callback Type	Description
CHECKOUT_ORDER_COMPLETED	The payment was successfully completed
CHECKOUT_ORDER_FAILED	The payment failed
PG_REFUND_COMPLETED	A refund was successfully processed
PG_REFUND_FAILED	A refund request failed
PG_REFUND_ACCEPTED	PhonePe Payment Gateway acknowledged the refund request, but it’s not completed yet
The payload details are explained below:
CallbackData
Parameter Name	Data Type	Description
merchantId	String	Merchant ID from which the request was initiated
orderId	String	Order ID generated by PhonePe Payment Gateway (only for order callbacks)
originalMerchantOrderId	String	Order ID generated by you (only for order callbacks)
refundId	String	Refund ID generated by PhonePe PG (only for refund callbacks)
merchantRefundId	String	Refund ID generated by you (only for refund callbacks)
state	String	The current state of the order or refund.
amount	Long	The amount processed in paisa.
expireAt	Long	The expiry timestamp in epoch format
errorCode	String	The error code (only for failed transactions)
detailedErrorCode	String	A more detailed error code (only for failures)
metaInfo	MetaInfo	Metadata passed during order initialization
paymentDetails	List<PaymentDetail>	The Payment details of the transaction
The PaymentRefundDetail property contains a list of payment details for each payment attempt made against an order. The details of each payment are explained in the table below.
Attribute	Data Type	Description
transactionId	String	Merchant ID from which the request was initiated
paymentMode	String	Order ID generated by PhonePe Payment Gateway (only for order callbacks)
timestamp	Long	Order ID generated by you (only for order callbacks)
state	String	Attempted transaction state. It can be any one of the following states:
• COMPLETED
• FAILED
• PENDING
errorCode	String	Error code (only present when the state is failed)
detailedErrorCode	String	A more specific error code (only present when the state is failed)
Exception Handling

Exception handling in the PhonePe SDK is managed through the PhonePeException, which captures errors related to PhonePe APIs. It provides detailed information such as HTTP status code, error code, message, and additional error data to help identify and resolve issues effectively.
PhonePeException
Exception raised for errors related to PhonePe APIs.
Attribute	Description
code	The status code of the http response.
message	The http error message.
httpStatusCode	The status code of the http response.
data	The details of the error that happened while calling PhonePe.
Sample Request

import { StandardCheckoutPayRequest, StandardCheckoutPayResponse } from 'pg-sdk-node';
import { v4 as uuid } from 'uuid';
 
const merchantOrderId = uuid();
const redirectUrl = 'https://www.merchant.com/redirect';
 
const request = StandardCheckoutPayRequest.buidler()
  .merchantOrderId(merchantOrderId)
  .redirectUrl(redirectUrl)
  .build();
 
client.pay(request).then((response) => {
  const checkoutPageUrl = response.redirectUrl;
}).catch((error) => {
    const error = error as PhonePeException;  //error thrown is of PhonePeException type
    console.log(error.message);
});
Response

* InstrumentCombo
    * Represents a combination of the payment instrument and the payment rail used to complete a transaction.
Property Parameters
Property	Type	
instrument	PaymentInstrumentV2	Instrument used for the payment.
rails	PaymentRail	Rail used for the payment.
amount	long	Amount transferred using the above instrument and rail.
	•	PaymentRail
    * Defines the type of rail used to initiate payment.
UPI RAIL
Property	Type
type	PaymentRailType
utr	String
upi_transaction_id	String
vpa	String
PG RAIL
Property	Type
type	PaymentRailType
transaction_id	String
authorization_code	String
service_transaction_id	String
	•	PaymentInstrumentV2
    * Represents the instrument used to initiate a payment. Various instrument types are listed below:
ACCOUNT
Property	Type
type	PaymentInstrumentType
ifsc	String
account_type	String
masked_account_number	String
account_holder_name	String
CREDIT_CARD
Property	Type
type	PaymentInstrumentType
bank_transaction_id	String
bank_id	String
arn	String
brn	String
DEBIT_CARD
Property	Type
type	PaymentInstrumentType
bank_transaction_id	String
bank_id	String
arn	String
brn	String
NET_BANKING
Property	Type
type	PaymentInstrumentType
bank_transaction_id	String
bank_id	String
arn	String
brn	String
EGV
Property	Type
type	PaymentInstrumentType
cardNumber	String
programId	String
WALLET
Property	Type
type	PaymentInstrumentType
walletId	String
 