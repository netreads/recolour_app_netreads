generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  credits       Int       @default(0)
  accounts      Account[]
  jobs          Job[]
  sessions      Session[]
  orders        Order[]
  transactions  Transaction[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  token     String   @unique
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String    @map("user_id")
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("verification")
}

model Job {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  originalUrl String    @map("original_url")
  outputUrl   String?   @map("output_url")
  status      JobStatus @default(PENDING)
  createdAt   DateTime  @default(now()) @map("created_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("jobs")
}

model Order {
  id              String      @id @default(cuid())
  userId          String      @map("user_id")
  packageName     String      @map("package_name")
  credits         Int
  amount          Int         // Amount in paise (e.g., 4990 for â‚¹49.90)
  currency        String      @default("INR")
  status          OrderStatus @default(PENDING)
  cashfreeOrderId String?     @map("cashfree_order_id")
  paymentId       String?     @map("payment_id")
  paymentStatus   String?     @map("payment_status")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]

  @@map("orders")
}

model Transaction {
  id              String           @id @default(cuid())
  orderId         String           @map("order_id")
  userId          String           @map("user_id")
  credits         Int
  amount          Int
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  cashfreeOrderId String?          @map("cashfree_order_id")
  paymentId       String?          @map("payment_id")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  order           Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

enum JobStatus {
  PENDING
  PROCESSING
  DONE
  FAILED
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
}

enum TransactionType {
  CREDIT_PURCHASE
  CREDIT_USAGE
  REFUND
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
