// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better-auth user table
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified Boolean   @default(false)
  credits       Int       @default(0)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  sessions Session[]
  accounts Account[]
  jobs     Job[]

  @@map("user")
}

// Better-auth session table
model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  token     String   @unique
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

// Better-auth account table (for OAuth providers like Google)
model Account {
  id                      String    @id @default(cuid())
  userId                  String    @map("user_id")
  accountId               String    @map("account_id")
  providerId               String    @map("provider_id")
  accessToken             String?   @map("access_token")
  refreshToken            String?   @map("refresh_token")
  idToken                 String?   @map("id_token")
  accessTokenExpiresAt    DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt   DateTime? @map("refresh_token_expires_at")
  scope                   String?
  password                String?
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

// Better-auth verification table
model Verification {
  id          String   @id @default(cuid())
  identifier  String
  value       String
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("verification")
}

// Jobs table
model Job {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  originalUrl String   @map("original_url")
  outputUrl   String?  @map("output_url")
  status      JobStatus @default(PENDING)
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("jobs")
}

enum JobStatus {
  PENDING
  PROCESSING
  DONE
  FAILED
}
