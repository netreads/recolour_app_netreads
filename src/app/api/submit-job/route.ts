import { NextRequest, NextResponse } from "next/server";
import { auth } from "@/lib/auth";
import { getDatabase } from "@/lib/db";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { AwsClient } from "aws4fetch";
import { v4 as uuidv4 } from "uuid";

// Force Node.js runtime since we're using better-sqlite3
export const runtime = 'nodejs';

export async function POST(request: NextRequest) {
  try {
    // Verify authentication
    const session = await auth.api.getSession({
      headers: request.headers,
    });

    if (!session || !session.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { jobId } = await request.json();
    
    if (!jobId) {
      return NextResponse.json({ error: "Job ID is required" }, { status: 400 });
    }

    // Get environment variables
    const env = process.env as any;
    if (!env.GEMINI_API_KEY || !env.R2_BUCKET || !env.R2_ACCESS_KEY_ID || !env.R2_SECRET_ACCESS_KEY || !env.R2_PUBLIC_URL) {
      return NextResponse.json({ error: "Missing configuration" }, { status: 500 });
    }

    // Get job from database
    const db = getDatabase(env.DB ? { DB: env.DB } : undefined);
    const job = await db.getJobById(jobId);

    if (!job) {
      return NextResponse.json({ error: "Job not found" }, { status: 404 });
    }

    if (job.user_id !== session.user.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
    }

    if (job.status !== "pending") {
      return NextResponse.json({ error: "Job already processed" }, { status: 400 });
    }

    // Update job status to processing
    await db.updateJob(jobId, { status: "processing" });

    // Initialize Gemini AI
    const genAI = new GoogleGenerativeAI(env.GEMINI_API_KEY);
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

    try {
      // Fetch the uploaded image
      const imageResponse = await fetch(job.original_url);
      if (!imageResponse.ok) {
        throw new Error("Failed to fetch uploaded image");
      }
      
      const imageBuffer = await imageResponse.arrayBuffer();
      const imageBase64 = Buffer.from(imageBuffer).toString("base64");
      const mimeType = imageResponse.headers.get("content-type") || "image/jpeg";

      // Create prompt for colorization
      const prompt = `Please colorize this black and white or old photo. Add realistic colors that would be appropriate for the time period and subject matter. Make the colors look natural and historically accurate. Return only the colorized image.`;

      // Generate colorized image using Gemini
      const result = await model.generateContent([
        prompt,
        {
          inlineData: {
            data: imageBase64,
            mimeType: mimeType,
          },
        },
      ]);

      const response = await result.response;
      const generatedImage = response.candidates?.[0]?.content?.parts?.[0];

      if (!generatedImage || !generatedImage.inlineData) {
        throw new Error("No image generated by Gemini");
      }

      // Upload processed image to R2
      const outputKey = `outputs/${jobId}-colorized.jpg`;
      const outputUrl = `${env.R2_PUBLIC_URL}/${outputKey}`;

      const r2Client = new AwsClient({
        accessKeyId: env.R2_ACCESS_KEY_ID,
        secretAccessKey: env.R2_SECRET_ACCESS_KEY,
        region: "auto",
        service: "s3",
      });

      const processedImageBuffer = Buffer.from(generatedImage.inlineData.data, "base64");

      await r2Client.fetch(`https://${env.R2_BUCKET}.r2.cloudflarestorage.com/${outputKey}`, {
        method: "PUT",
        body: processedImageBuffer,
        headers: {
          "Content-Type": "image/jpeg",
        },
      });

      // Update job with output URL and status
      await db.updateJob(jobId, {
        output_url: outputUrl,
        status: "done",
      });

      return NextResponse.json({
        success: true,
        jobId,
        outputUrl,
      });
    } catch (processingError) {
      console.error("Error processing image:", processingError);
      
      // Update job status to failed
      await db.updateJob(jobId, { status: "failed" });
      
      return NextResponse.json(
        { error: "Failed to process image" },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("Error submitting job:", error);
    return NextResponse.json(
      { error: "Failed to submit job" },
      { status: 500 }
    );
  }
}
